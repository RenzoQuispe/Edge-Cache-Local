events {
    worker_connections 1024;
}

http {
    # Tipos MIME
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Formato de log personalizado con cache status y timing
    log_format cache_metrics '$remote_addr - [$time_local] "$request" '
                            '$status $body_bytes_sent $request_time '
                            '"$upstream_cache_status"';

    # Definición de la zona de caché
    proxy_cache_path /var/cache/nginx/app_cache 
                     levels=1:2 
                     keys_zone=app_cache:100m 
                     max_size=1g 
                     inactive=60m 
                     use_temp_path=off;

    upstream backend {
        server backend:8082 max_fails=3 fail_timeout=30s;
    }

    server {
        listen 80;
        server_name localhost;
        
        # Usar el formato de log personalizado
        access_log /var/log/nginx/access.log cache_metrics;
        error_log /var/log/nginx/error.log warn;
    
        # Headers de identificación
        add_header X-Cache-Status $upstream_cache_status always;
        add_header X-Proxy-Server "Nginx-EdgeCache/1.0" always;
        
        # Health check del proxy
        location /proxy/health {
            access_log off;
            return 200 "Proxy OK\n";
            add_header Content-Type text/plain;
        }
        
        # Endpoint para ver estadísticas (simple)
        location /proxy/stats {
            access_log off;
            stub_status on;
        }
        
        # ALTERNATIVA AL PURGE: Endpoint para invalidar manualmente
        # Borra todo el directorio de caché (requiere recrear el contenedor)
        location /proxy/purge-all {
            allow 127.0.0.1;
            allow 172.16.0.0/12;  # Rango Docker
            deny all;
            
            return 200 "Para purgar caché: docker exec <container> rm -rf /var/cache/nginx/app_cache/*\n";
            add_header Content-Type text/plain;
        }
        
        # Contenido estático - caché largo
        location /api/static {
            proxy_pass http://backend;
            proxy_cache app_cache;
            proxy_cache_key "$scheme$request_method$host$uri";
            proxy_cache_valid 200 304 1h;
            proxy_cache_valid 404 1m;
            proxy_cache_use_stale error timeout http_500 http_502 http_503;
            proxy_cache_background_update on;
            proxy_cache_lock on;
            
            # Headers para el backend
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Contenido dinámico - caché corto con revalidación
        location /api/dynamic {
            proxy_pass http://backend;
            proxy_cache app_cache;
            proxy_cache_key "$scheme$request_method$host$uri$is_args$args";
            proxy_cache_valid 200 1m;
            proxy_cache_revalidate on;
            proxy_cache_use_stale updating;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # Contenido sin caché - siempre bypass
        location /api/no-cache {
            proxy_pass http://backend;
            proxy_cache_bypass 1;
            proxy_no_cache 1;
            
            add_header Cache-Control "no-store, no-cache, must-revalidate" always;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # Endpoint de datos - caché moderado con variación por parámetros
        location /api/data {
            proxy_pass http://backend;
            proxy_cache app_cache;
            proxy_cache_key "$scheme$request_method$host$uri$is_args$args";
            proxy_cache_valid 200 5m;
            proxy_cache_valid 404 30s;
            proxy_cache_methods GET HEAD;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # Invalidación de caché
        location /api/invalidate {
            proxy_pass http://backend;
            proxy_cache_bypass 1;
            proxy_no_cache 1;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        # Health check del backend
        location /health {
            proxy_pass http://backend;
            proxy_cache_bypass 1;
            access_log off;
            
            proxy_connect_timeout 2s;
            proxy_read_timeout 2s;
        }
        
        # Catch-all para otras rutas - sin caché por defecto
        location / {
            proxy_pass http://backend;
            proxy_cache_bypass 1;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}