name: CI Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  TERRAFORM_VERSION: '1.6.0'

jobs:
  lint:
    name: Lint y Formato
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Instalar dependencias
        run: |
          pip install -r requirements-dev.txt
      
      - name: Ejecutar Black (check)
        run: |
          black --check --line-length=120 src tests
      
      - name: Ejecutar isort (check)
        run: |
          isort --check-only --profile black src tests
      
      - name: Ejecutar Flake8
        run: |
          flake8 src tests --max-line-length=120 --extend-ignore=E203,W503

  test:
    name: Tests y Cobertura
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Instalar dependencias
        run: |
          pip install -r requirements-dev.txt
      
      - name: Ejecutar tests con cobertura
        run: |
          pytest tests/ \
            -v \
            --cov=src \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-fail-under=90
      
      - name: Upload coverage a Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
      
      - name: Generar reporte HTML
        if: always()
        run: |
          pytest tests/ --cov=src --cov-report=html
      
      - name: Upload reporte de cobertura
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov/

  security:
    name: Seguridad
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Detectar secretos con Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Análisis de seguridad Python
        run: |
          pip install safety
          safety check --json || true

  terraform:
    name: Validación IaC
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Terraform Format Check
        working-directory: infra/terraform/stacks/local-dev
        run: |
          terraform fmt -check -recursive
      
      - name: Terraform Init
        working-directory: infra/terraform/stacks/local-dev
        run: |
          terraform init -backend=false
      
      - name: Terraform Validate
        working-directory: infra/terraform/stacks/local-dev
        run: |
          terraform validate
      
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
      
      - name: TFLint
        working-directory: infra/terraform/stacks/local-dev
        run: |
          tflint --init
          tflint --recursive
      
      - name: tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: infra/terraform

  build:
    name: Build Docker
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build imagen
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: edge-cache-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration:
    name: Tests de Integración
    runs-on: ubuntu-latest
    needs: [build]
    
    services:
      docker:
        image: docker:24-dind
        options: --privileged
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Instalar dependencias
        run: |
          pip install -r requirements-dev.txt
      
      - name: Tests de integración
        run: |
          pytest tests/integration/ -v

  project-automation:
    name: Actualizar Tablero
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Mover tarjeta a "In Progress"
        if: github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          script: |
            // Lógica para mover tarjeta en Projects
            console.log('PR opened - moving to In Progress')
      
      - name: Mover tarjeta a "Review/QA"
        if: github.event.action == 'ready_for_review'
        uses: actions/github-script@v7
        with:
          script: |
            console.log('PR ready for review - moving to Review/QA')

  all-checks:
    name: ✅ Todos los Checks
    runs-on: ubuntu-latest
    needs: [lint, test, security, terraform, build, integration]
    if: always()
    
    steps:
      - name: Verificar estado de jobs
        run: |
          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.test.result }}" != "success" ] || \
             [ "${{ needs.security.result }}" != "success" ] || \
             [ "${{ needs.terraform.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ] || \
             [ "${{ needs.integration.result }}" != "success" ]; then
            echo "❌ Algunos checks fallaron"
            exit 1
          fi
          echo "✅ Todos los checks pasaron"